import { HttpMethod } from 'types/request';
import { createQueryString } from 'utils/queryString';
import { requestJSON } from 'utils/request/fetch';
import { createInit } from './init';
export default {
    get: ({ url, params }) => (requestJSON(`${url}${createQueryString(params)}`, createInit({
        method: HttpMethod.get,
    }))),
    post: ({ url, params }) => (requestJSON(url, createInit({
        method: HttpMethod.post,
        body: JSON.stringify(params),
    }))),
    put: ({ url, params }) => (requestJSON(url, createInit({
        method: HttpMethod.put,
        body: JSON.stringify(params),
    }))),
    patch: ({ url, params }) => (requestJSON(url, createInit({
        method: HttpMethod.patch,
        body: JSON.stringify(params),
    }))),
    delete: ({ url, params }) => (requestJSON(url, createInit({
        method: HttpMethod.delete,
        body: JSON.stringify(params),
    }))),
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tlaXN1a2VraWRvL3Byb2plY3RzL2l0dW5lc0ZldGNoZXIvc3JjL2FwaS91dGlscy9hcGlGZXRjaC50cyIsIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVwQyxlQUFlO0lBQ2IsR0FBRyxFQUFFLENBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFrQixFQUFjLEVBQUUsQ0FBQyxDQUM3RCxXQUFXLENBQ1QsR0FBRyxHQUFHLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFDcEMsVUFBVSxDQUFDO1FBQ1QsTUFBTSxFQUFFLFVBQVUsQ0FBQyxHQUFHO0tBQ3ZCLENBQUMsQ0FDSCxDQUNGO0lBQ0QsSUFBSSxFQUFFLENBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFrQixFQUFjLEVBQUUsQ0FBQyxDQUM5RCxXQUFXLENBQ1AsR0FBRyxFQUNILFVBQVUsQ0FBQztRQUNULE1BQU0sRUFBRSxVQUFVLENBQUMsSUFBSTtRQUN2QixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7S0FDN0IsQ0FBQyxDQUNMLENBQ0Y7SUFDRCxHQUFHLEVBQUUsQ0FBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQWtCLEVBQWMsRUFBRSxDQUFDLENBQzdELFdBQVcsQ0FDUCxHQUFHLEVBQ0gsVUFBVSxDQUFDO1FBQ1QsTUFBTSxFQUFFLFVBQVUsQ0FBQyxHQUFHO1FBQ3RCLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztLQUM3QixDQUFDLENBQ0wsQ0FDRjtJQUNELEtBQUssRUFBRSxDQUFVLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBa0IsRUFBYyxFQUFFLENBQUMsQ0FDL0QsV0FBVyxDQUNQLEdBQUcsRUFDSCxVQUFVLENBQUM7UUFDVCxNQUFNLEVBQUUsVUFBVSxDQUFDLEtBQUs7UUFDeEIsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0tBQzdCLENBQUMsQ0FDTCxDQUNGO0lBQ0QsTUFBTSxFQUFFLENBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFrQixFQUFjLEVBQUUsQ0FBQyxDQUNoRSxXQUFXLENBQ1AsR0FBRyxFQUNILFVBQVUsQ0FBQztRQUNULE1BQU0sRUFBRSxVQUFVLENBQUMsTUFBTTtRQUN6QixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7S0FDN0IsQ0FBQyxDQUNMLENBQ0Y7Q0FDRixDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9rZWlzdWtla2lkby9wcm9qZWN0cy9pdHVuZXNGZXRjaGVyL3NyYy9hcGkvdXRpbHMvYXBpRmV0Y2gudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cE1ldGhvZCwgRmV0Y2hBcGlDb25maWcgfSBmcm9tICd0eXBlcy9yZXF1ZXN0JztcbmltcG9ydCB7IGNyZWF0ZVF1ZXJ5U3RyaW5nIH0gZnJvbSAndXRpbHMvcXVlcnlTdHJpbmcnO1xuaW1wb3J0IHsgcmVxdWVzdEpTT04gfSBmcm9tICd1dGlscy9yZXF1ZXN0L2ZldGNoJztcbmltcG9ydCB7IGNyZWF0ZUluaXQgfSBmcm9tICcuL2luaXQnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldDogPFYgPSBhbnk+KHsgdXJsLCBwYXJhbXMgfTogRmV0Y2hBcGlDb25maWcpOiBQcm9taXNlPFY+ID0+IChcbiAgICByZXF1ZXN0SlNPTihcbiAgICAgIGAke3VybH0ke2NyZWF0ZVF1ZXJ5U3RyaW5nKHBhcmFtcyl9YCxcbiAgICAgIGNyZWF0ZUluaXQoe1xuICAgICAgICBtZXRob2Q6IEh0dHBNZXRob2QuZ2V0LFxuICAgICAgfSlcbiAgICApXG4gICksXG4gIHBvc3Q6IDxWID0gYW55Pih7IHVybCwgcGFyYW1zIH06IEZldGNoQXBpQ29uZmlnKTogUHJvbWlzZTxWPiA9PiAoXG4gICAgcmVxdWVzdEpTT04oXG4gICAgICAgIHVybCxcbiAgICAgICAgY3JlYXRlSW5pdCh7XG4gICAgICAgICAgbWV0aG9kOiBIdHRwTWV0aG9kLnBvc3QsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSxcbiAgICAgICAgfSlcbiAgICApXG4gICksXG4gIHB1dDogPFYgPSBhbnk+KHsgdXJsLCBwYXJhbXMgfTogRmV0Y2hBcGlDb25maWcpOiBQcm9taXNlPFY+ID0+IChcbiAgICByZXF1ZXN0SlNPTihcbiAgICAgICAgdXJsLFxuICAgICAgICBjcmVhdGVJbml0KHtcbiAgICAgICAgICBtZXRob2Q6IEh0dHBNZXRob2QucHV0LFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyksXG4gICAgICAgIH0pXG4gICAgKVxuICApLFxuICBwYXRjaDogPFYgPSBhbnk+KHsgdXJsLCBwYXJhbXMgfTogRmV0Y2hBcGlDb25maWcpOiBQcm9taXNlPFY+ID0+IChcbiAgICByZXF1ZXN0SlNPTihcbiAgICAgICAgdXJsLFxuICAgICAgICBjcmVhdGVJbml0KHtcbiAgICAgICAgICBtZXRob2Q6IEh0dHBNZXRob2QucGF0Y2gsXG4gICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSxcbiAgICAgICAgfSlcbiAgICApXG4gICksXG4gIGRlbGV0ZTogPFYgPSBhbnk+KHsgdXJsLCBwYXJhbXMgfTogRmV0Y2hBcGlDb25maWcpOiBQcm9taXNlPFY+ID0+IChcbiAgICByZXF1ZXN0SlNPTihcbiAgICAgICAgdXJsLFxuICAgICAgICBjcmVhdGVJbml0KHtcbiAgICAgICAgICBtZXRob2Q6IEh0dHBNZXRob2QuZGVsZXRlLFxuICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcyksXG4gICAgICAgIH0pXG4gICAgKVxuICApLFxufTtcbiJdLCJ2ZXJzaW9uIjozfQ==