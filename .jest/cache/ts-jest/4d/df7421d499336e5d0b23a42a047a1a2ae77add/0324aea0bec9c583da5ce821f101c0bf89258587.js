import * as conditionals from './conditionals';
export const safeParser = (parser) => ((response) => (conditionals.isEmptyStatus(response)
    ? Promise.resolve(null)
    : parser(response)));
export const parseValidStatus = (response) => {
    if (conditionals.isSuccessStatus(response)) {
        return response;
    }
    const error = new Error(response.statusText);
    error.response = response;
    throw error;
};
export const parseValue = (response) => (conditionals.isEmptyStatus(response)
    ? null
    : response);
export const parseText = (response) => (response.text());
export const parseJSON = (response) => (parseText(response)
    .then(text => (text
    ? JSON.parse(text)
    : {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tlaXN1a2VraWRvL3Byb2plY3RzL2l0dW5lc0ZldGNoZXIvc3JjL3V0aWxzL3JlcXVlc3QvZmV0Y2gvcGFyc2Vycy50cyIsIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUssWUFBWSxNQUFNLGdCQUFnQixDQUFDO0FBSS9DLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFJLE1BQWlCLEVBQUUsRUFBRSxDQUFDLENBQ2xELENBQUMsUUFBa0IsRUFBcUIsRUFBRSxDQUFDLENBQ3pDLFlBQVksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUN2QixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUNyQixDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtJQUNyRCxJQUFJLFlBQVksQ0FBQyxlQUFlLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDMUMsT0FBTyxRQUFRLENBQUM7S0FDakI7SUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFzQixDQUFDO0lBRWxFLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzFCLE1BQU0sS0FBSyxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsUUFBa0IsRUFBRSxFQUFFLENBQUMsQ0FDaEQsWUFBWSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7SUFDbEMsQ0FBQyxDQUFDLElBQUk7SUFDTixDQUFDLENBQUMsUUFBUSxDQUNiLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxRQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUMvQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQ2hCLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxRQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUMvQyxTQUFTLENBQUMsUUFBUSxDQUFDO0tBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQ1osSUFBSTtJQUNKLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztJQUNsQixDQUFDLENBQUMsRUFBRSxDQUNMLENBQUMsQ0FDTCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9rZWlzdWtla2lkby9wcm9qZWN0cy9pdHVuZXNGZXRjaGVyL3NyYy91dGlscy9yZXF1ZXN0L2ZldGNoL3BhcnNlcnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXJyb3JXaXRoUmVzcG9uc2UgfSBmcm9tICd0eXBlcy9yZXF1ZXN0JztcbmltcG9ydCAqIGFzIGNvbmRpdGlvbmFscyBmcm9tICcuL2NvbmRpdGlvbmFscyc7XG5cbmV4cG9ydCB0eXBlIFBhcnNlcjxSZXN1bHQ+ID0gKHJlc3BvbmVzOiBSZXNwb25zZSkgPT4gUHJvbWlzZTxSZXN1bHQ+O1xuXG5leHBvcnQgY29uc3Qgc2FmZVBhcnNlciA9IDxWPihwYXJzZXI6IFBhcnNlcjxWPikgPT4gKFxuICAocmVzcG9uc2U6IFJlc3BvbnNlKTogUHJvbWlzZTxWIHwgbnVsbD4gPT4gKFxuICAgIGNvbmRpdGlvbmFscy5pc0VtcHR5U3RhdHVzKHJlc3BvbnNlKVxuICAgICAgPyBQcm9taXNlLnJlc29sdmUobnVsbClcbiAgICAgIDogcGFyc2VyKHJlc3BvbnNlKVxuICApXG4pO1xuXG5leHBvcnQgY29uc3QgcGFyc2VWYWxpZFN0YXR1cyA9IChyZXNwb25zZTogUmVzcG9uc2UpID0+IHtcbiAgaWYgKGNvbmRpdGlvbmFscy5pc1N1Y2Nlc3NTdGF0dXMocmVzcG9uc2UpKSB7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG5cbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCkgYXMgRXJyb3JXaXRoUmVzcG9uc2U7XG5cbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgdGhyb3cgZXJyb3I7XG59O1xuXG5leHBvcnQgY29uc3QgcGFyc2VWYWx1ZSA9IChyZXNwb25zZTogUmVzcG9uc2UpID0+IChcbiAgY29uZGl0aW9uYWxzLmlzRW1wdHlTdGF0dXMocmVzcG9uc2UpXG4gICAgPyBudWxsXG4gICAgOiByZXNwb25zZVxuKTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlVGV4dCA9IChyZXNwb25zZTogUmVzcG9uc2UpID0+IChcbiAgcmVzcG9uc2UudGV4dCgpXG4pO1xuXG5leHBvcnQgY29uc3QgcGFyc2VKU09OID0gKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gKFxuICBwYXJzZVRleHQocmVzcG9uc2UpXG4gICAgLnRoZW4odGV4dCA9PiAoXG4gICAgICB0ZXh0XG4gICAgICA/IEpTT04ucGFyc2UodGV4dClcbiAgICAgIDoge31cbiAgICApKVxuKTtcbiJdLCJ2ZXJzaW9uIjozfQ==