import * as Rx from 'rxjs';
import { parseRequestError } from 'utils/request/error';
import { isActionOf } from 'states/utils/action';
import * as actions from 'states/songs/actions';
import search from 'api/songs';
export const fetchEpic = action$ => (action$
    .filter(isActionOf(actions.songsFetch))
    .mergeMap(({ payload }) => (Rx.Observable.concat(Rx.Observable.of(actions.songsFetchLoading()), Rx.Observable.fromPromise(search.get(payload))
    .mergeMap(response => (Rx.Observable.concat(Rx.Observable.of(actions.songsReceive(response)), Rx.Observable.of(actions.songsFetchSuccess()))))
    .catch((requestError) => (Rx.Observable.fromPromise(parseRequestError(requestError)
    .then(error => actions.songsFetchFailure(error))
    .catch(error => actions.songsFetchFailure(error)))))))));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2tlaXN1a2VraWRvL3Byb2plY3RzL2l0dW5lc0ZldGNoZXIvc3JjL3N0YXRlcy9zb25ncy9lcGljL2ZldGNoL2luZGV4LnRzIiwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBSTNCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUdqRCxPQUFPLEtBQUssT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sTUFBTSxNQUFNLFdBQVcsQ0FBQztBQUkvQixNQUFNLENBQUMsTUFBTSxTQUFTLEdBSWxCLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FDYixPQUFPO0tBQ0osTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDdEMsUUFBUSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FDekIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQ2xCLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLEVBQzdDLEVBQUUsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDM0MsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FDcEIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQ2xCLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsRUFDaEQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FDOUMsQ0FDRixDQUFDO0tBQ0QsS0FBSyxDQUFDLENBQUMsWUFBMEIsRUFBRSxFQUFFLENBQUMsQ0FDckMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUFDO0tBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMvQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDbEQsQ0FDRixDQUFDLENBQ0wsQ0FDRixDQUFDLENBQ0wsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMva2Vpc3VrZWtpZG8vcHJvamVjdHMvaXR1bmVzRmV0Y2hlci9zcmMvc3RhdGVzL3NvbmdzL2VwaWMvZmV0Y2gvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUnggZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBFcGljIH0gZnJvbSAncmVkdXgtb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBBY3Rpb25zT2YgfSBmcm9tICd0eXBlcy9zdGF0ZSc7XG5pbXBvcnQgeyBSZXF1ZXN0RXJyb3IgfSBmcm9tICd0eXBlcy9yZXF1ZXN0JztcbmltcG9ydCB7IHBhcnNlUmVxdWVzdEVycm9yIH0gZnJvbSAndXRpbHMvcmVxdWVzdC9lcnJvcic7XG5pbXBvcnQgeyBpc0FjdGlvbk9mIH0gZnJvbSAnc3RhdGVzL3V0aWxzL2FjdGlvbic7XG5pbXBvcnQgeyBSb290U3RhdGUgfSBmcm9tICdzdGF0ZXMvcm9vdC9yZWR1Y2VyJztcbmltcG9ydCB7IFJvb3RBY3Rpb25zIH0gZnJvbSAnc3RhdGVzL3Jvb3QvYWN0aW9ucyc7XG5pbXBvcnQgKiBhcyBhY3Rpb25zIGZyb20gJ3N0YXRlcy9zb25ncy9hY3Rpb25zJztcbmltcG9ydCBzZWFyY2ggZnJvbSAnYXBpL3NvbmdzJztcblxudHlwZSBBY3Rpb25zID0gQWN0aW9uc09mPHR5cGVvZiBhY3Rpb25zPjtcblxuZXhwb3J0IGNvbnN0IGZldGNoRXBpYzogRXBpYzxcbiAgUm9vdEFjdGlvbnMsXG4gIEFjdGlvbnMsXG4gIFJvb3RTdGF0ZVxuPiA9IGFjdGlvbiQgPT4gKFxuICBhY3Rpb24kXG4gICAgLmZpbHRlcihpc0FjdGlvbk9mKGFjdGlvbnMuc29uZ3NGZXRjaCkpXG4gICAgLm1lcmdlTWFwKCh7IHBheWxvYWQgfSkgPT4gKFxuICAgICAgUnguT2JzZXJ2YWJsZS5jb25jYXQ8QWN0aW9ucz4oXG4gICAgICAgIFJ4Lk9ic2VydmFibGUub2YoYWN0aW9ucy5zb25nc0ZldGNoTG9hZGluZygpKSxcbiAgICAgICAgUnguT2JzZXJ2YWJsZS5mcm9tUHJvbWlzZShzZWFyY2guZ2V0KHBheWxvYWQpKVxuICAgICAgICAgIC5tZXJnZU1hcChyZXNwb25zZSA9PiAoXG4gICAgICAgICAgICBSeC5PYnNlcnZhYmxlLmNvbmNhdDxBY3Rpb25zPihcbiAgICAgICAgICAgICAgUnguT2JzZXJ2YWJsZS5vZihhY3Rpb25zLnNvbmdzUmVjZWl2ZShyZXNwb25zZSkpLFxuICAgICAgICAgICAgICBSeC5PYnNlcnZhYmxlLm9mKGFjdGlvbnMuc29uZ3NGZXRjaFN1Y2Nlc3MoKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApKVxuICAgICAgICAgIC5jYXRjaCgocmVxdWVzdEVycm9yOiBSZXF1ZXN0RXJyb3IpID0+IChcbiAgICAgICAgICAgIFJ4Lk9ic2VydmFibGUuZnJvbVByb21pc2UocGFyc2VSZXF1ZXN0RXJyb3IocmVxdWVzdEVycm9yKVxuICAgICAgICAgICAgICAudGhlbihlcnJvciA9PiBhY3Rpb25zLnNvbmdzRmV0Y2hGYWlsdXJlKGVycm9yKSlcbiAgICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IGFjdGlvbnMuc29uZ3NGZXRjaEZhaWx1cmUoZXJyb3IpKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICkpXG4gICAgICApXG4gICAgKSlcbik7XG5cbiJdLCJ2ZXJzaW9uIjozfQ==