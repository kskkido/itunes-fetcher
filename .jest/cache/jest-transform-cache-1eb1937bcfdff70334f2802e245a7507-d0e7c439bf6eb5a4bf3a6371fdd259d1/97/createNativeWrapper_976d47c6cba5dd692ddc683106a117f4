8c17370c2760b4df8d3ba5d39361beaf
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = createNativeWrapper;var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));var _react = _interopRequireDefault(require("react"));

var _NativeViewGestureHandler = _interopRequireDefault(require("./NativeViewGestureHandler"));var _jsxFileName = "/Users/keisukekido/projects/itunesFetcher/node_modules/react-native-gesture-handler/createNativeWrapper.js";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

var NATIVE_WRAPPER_BIND_BLACKLIST = new Set(['replaceState', 'isMounted']);








var NATIVE_WRAPPER_PROPS_FILTER = [
'id',
'minPointers',
'enabled',
'waitFor',
'simultaneousHandlers',
'shouldCancelWhenOutside',
'hitSlop',
'onGestureEvent',
'onHandlerStateChange',
'onBegan',
'onFailed',
'onCancelled',
'onActivated',
'onEnded',
'shouldActivateOnStart',
'disallowInterruption',
'onGestureHandlerEvent',
'onGestureHandlerStateChange'];


function createNativeWrapper(Component) {var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};var
  ComponentWrapper = function (_React$Component) {(0, _inherits2.default)(ComponentWrapper, _React$Component);function ComponentWrapper() {var _getPrototypeOf2;var _this;(0, _classCallCheck2.default)(this, ComponentWrapper);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf2.default)(ComponentWrapper)).call.apply(_getPrototypeOf2, [this].concat(args)));_this.






      _refHandler = function (node) {

        var source = node;
        while (source != null) {
          for (var _iterator = Object.getOwnPropertyNames(source), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.iterator : "@@iterator" : "@@iterator" : "@@iterator"]();;) {var _ref;if (_isArray) {if (_i >= _iterator.length) break;_ref = _iterator[_i++];} else {_i = _iterator.next();if (_i.done) break;_ref = _i.value;}var _methodName = _ref;
            if (
            !_methodName.startsWith('_') &&
            !_methodName.startsWith('component') &&
            !NATIVE_WRAPPER_BIND_BLACKLIST.has(_methodName) &&
            typeof source[_methodName] === 'function' &&
            _this[_methodName] === undefined)
            {
              if (source[_methodName].prototype) {

                _this[_methodName] = source[_methodName].bind(node);
              } else {
                _this[_methodName] = source[_methodName];
              }
            }
          }
          source = Object.getPrototypeOf(source);
        }
      };return _this;}(0, _createClass2.default)(ComponentWrapper, [{ key: "render", value: function render()

      {var _this2 = this;

        var gestureHandlerProps = Object.keys(this.props).reduce(
        function (props, key) {
          if (NATIVE_WRAPPER_PROPS_FILTER.indexOf(key) !== -1) {
            props[key] = _this2.props[key];
          }
          return props;
        }, _objectSpread({},
        config));

        return (
          _react.default.createElement(_NativeViewGestureHandler.default, (0, _extends2.default)({}, gestureHandlerProps, { __source: { fileName: _jsxFileName, lineNumber: 79 } }),
          _react.default.createElement(Component, (0, _extends2.default)({}, this.props, { ref: this._refHandler, __source: { fileName: _jsxFileName, lineNumber: 80 } }))));


      } }]);return ComponentWrapper;}(_react.default.Component);ComponentWrapper.propTypes = _objectSpread({}, Component.propTypes);ComponentWrapper.displayName = Component.displayName || 'ComponentWrapper';

  return ComponentWrapper;
}