{"version":3,"sources":["/Users/keisukekido/projects/itunesFetcher/src/states/songs/epic/fetch/index.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAIA;;AACA;;AAGA;;AACA;;AAIO,IAAM,SAAS,GAIlB,SAJS,SAIT,CAAA,OAAO;AAAA,SACT,OAAO,CACJ,MADH,CACU,wBAAW,OAAO,CAAC,UAAnB,CADV,EAEG,QAFH,CAEY;AAAA,QAAG,OAAH,QAAG,OAAH;AAAA,WACR,EAAE,CAAC,UAAH,CAAc,MAAd,CACE,EAAE,CAAC,UAAH,CAAc,EAAd,CAAiB,OAAO,CAAC,iBAAR,EAAjB,CADF,EAEE,EAAE,CAAC,UAAH,CAAc,WAAd,CAA0B,eAAO,GAAP,CAAW,OAAX,CAA1B,EACG,QADH,CACY,UAAA,QAAQ;AAAA,aAChB,EAAE,CAAC,UAAH,CAAc,MAAd,CACE,EAAE,CAAC,UAAH,CAAc,EAAd,CAAiB,OAAO,CAAC,YAAR,CAAqB,QAArB,CAAjB,CADF,EAEE,EAAE,CAAC,UAAH,CAAc,EAAd,CAAiB,OAAO,CAAC,iBAAR,EAAjB,CAFF,CADgB;AAAA,KADpB,EAOG,KAPH,CAOS,UAAC,YAAD;AAAA,aACL,EAAE,CAAC,UAAH,CAAc,WAAd,CAA0B,8BAAkB,YAAlB,EACvB,IADuB,CAClB,UAAA,KAAK;AAAA,eAAI,OAAO,CAAC,iBAAR,CAA0B,KAA1B,CAAJ;AAAA,OADa,EAEvB,KAFuB,CAEjB,UAAA,KAAK;AAAA,eAAI,OAAO,CAAC,iBAAR,CAA0B,KAA1B,CAAJ;AAAA,OAFY,CAA1B,CADK;AAAA,KAPT,CAFF,CADQ;AAAA,GAFZ,CADS;AAAA,CAJJ","sourcesContent":["import * as Rx from 'rxjs';\nimport { Epic } from 'redux-observable';\nimport { ActionsOf } from 'types/state';\nimport { RequestError } from 'types/request';\nimport { parseRequestError } from 'utils/request/error';\nimport { isActionOf } from 'states/utils/action';\nimport { RootState } from 'states/root/reducer';\nimport { RootActions } from 'states/root/actions';\nimport * as actions from 'states/songs/actions';\nimport search from 'api/songs';\n\ntype Actions = ActionsOf<typeof actions>;\n\nexport const fetchEpic: Epic<\n  RootActions,\n  Actions,\n  RootState\n> = action$ => (\n  action$\n    .filter(isActionOf(actions.songsFetch))\n    .mergeMap(({ payload }) => (\n      Rx.Observable.concat<Actions>(\n        Rx.Observable.of(actions.songsFetchLoading()),\n        Rx.Observable.fromPromise(search.get(payload))\n          .mergeMap(response => (\n            Rx.Observable.concat<Actions>(\n              Rx.Observable.of(actions.songsReceive(response)),\n              Rx.Observable.of(actions.songsFetchSuccess())\n            )\n          ))\n          .catch((requestError: RequestError) => (\n            Rx.Observable.fromPromise(parseRequestError(requestError)\n              .then(error => actions.songsFetchFailure(error))\n              .catch(error => actions.songsFetchFailure(error))\n            )\n          ))\n      )\n    ))\n);\n\n"]}