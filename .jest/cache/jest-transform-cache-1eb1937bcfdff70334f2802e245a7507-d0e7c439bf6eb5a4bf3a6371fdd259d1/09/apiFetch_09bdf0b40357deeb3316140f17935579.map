{"version":3,"sources":["/Users/keisukekido/projects/itunesFetcher/src/api/utils/apiFetch.ts"],"names":[],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;eAEe;AACb,EAAA,GAAG,EAAE;AAAA,QAAY,GAAZ,QAAY,GAAZ;AAAA,QAAiB,MAAjB,QAAiB,MAAjB;AAAA,WACH,6BACK,GADL,GACW,oCAAkB,MAAlB,CADX,EAEE,sBAAW;AACT,MAAA,MAAM,EAAE,oBAAW;AADV,KAAX,CAFF,CADG;AAAA,GADQ;AASb,EAAA,IAAI,EAAE;AAAA,QAAY,GAAZ,SAAY,GAAZ;AAAA,QAAiB,MAAjB,SAAiB,MAAjB;AAAA,WACJ,wBACI,GADJ,EAEI,sBAAW;AACT,MAAA,MAAM,EAAE,oBAAW,IADV;AAET,MAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,MAAf;AAFG,KAAX,CAFJ,CADI;AAAA,GATO;AAkBb,EAAA,GAAG,EAAE;AAAA,QAAY,GAAZ,SAAY,GAAZ;AAAA,QAAiB,MAAjB,SAAiB,MAAjB;AAAA,WACH,wBACI,GADJ,EAEI,sBAAW;AACT,MAAA,MAAM,EAAE,oBAAW,GADV;AAET,MAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,MAAf;AAFG,KAAX,CAFJ,CADG;AAAA,GAlBQ;AA2Bb,EAAA,KAAK,EAAE;AAAA,QAAY,GAAZ,SAAY,GAAZ;AAAA,QAAiB,MAAjB,SAAiB,MAAjB;AAAA,WACL,wBACI,GADJ,EAEI,sBAAW;AACT,MAAA,MAAM,EAAE,oBAAW,KADV;AAET,MAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,MAAf;AAFG,KAAX,CAFJ,CADK;AAAA,GA3BM;AAoCb,EAAA,MAAM,EAAE;AAAA,QAAY,GAAZ,SAAY,GAAZ;AAAA,QAAiB,MAAjB,SAAiB,MAAjB;AAAA,WACN,wBACI,GADJ,EAEI,sBAAW;AACT,MAAA,MAAM,EAAE,oBAAW,MADV;AAET,MAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,MAAf;AAFG,KAAX,CAFJ,CADM;AAAA;AApCK,C","sourcesContent":["import { HttpMethod, FetchApiConfig } from 'types/request';\nimport { createQueryString } from 'utils/queryString';\nimport { requestJSON } from 'utils/request/fetch';\nimport { createInit } from './init';\n\nexport default {\n  get: <V = any>({ url, params }: FetchApiConfig): Promise<V> => (\n    requestJSON(\n      `${url}${createQueryString(params)}`,\n      createInit({\n        method: HttpMethod.get,\n      })\n    )\n  ),\n  post: <V = any>({ url, params }: FetchApiConfig): Promise<V> => (\n    requestJSON(\n        url,\n        createInit({\n          method: HttpMethod.post,\n          body: JSON.stringify(params),\n        })\n    )\n  ),\n  put: <V = any>({ url, params }: FetchApiConfig): Promise<V> => (\n    requestJSON(\n        url,\n        createInit({\n          method: HttpMethod.put,\n          body: JSON.stringify(params),\n        })\n    )\n  ),\n  patch: <V = any>({ url, params }: FetchApiConfig): Promise<V> => (\n    requestJSON(\n        url,\n        createInit({\n          method: HttpMethod.patch,\n          body: JSON.stringify(params),\n        })\n    )\n  ),\n  delete: <V = any>({ url, params }: FetchApiConfig): Promise<V> => (\n    requestJSON(\n        url,\n        createInit({\n          method: HttpMethod.delete,\n          body: JSON.stringify(params),\n        })\n    )\n  ),\n};\n"]}