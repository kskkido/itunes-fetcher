{"version":3,"sources":["/Users/keisukekido/projects/itunesFetcher/src/states/songs/reducer/request/index.ts"],"names":[],"mappings":";;;;;;;AACA;;AACA;;AAOO,IAAM,cAAc,GAAG,4BAA4B;AAAE,EAAA,MAAM,EAAE;AAAV,CAA5B,EAC3B,IAD2B,CAE1B,OAAO,CAAC,iBAFkB,EAG1B;AAAA,SAAO;AAAE,IAAA,MAAM,EAAE;AAAV,GAAP;AAAA,CAH0B,EAK3B,IAL2B,CAM1B,OAAO,CAAC,iBANkB,EAO1B;AAAA,SAAO;AAAE,IAAA,MAAM,EAAE;AAAV,GAAP;AAAA,CAP0B,EAS3B,IAT2B,CAU1B,OAAO,CAAC,iBAVkB,EAW1B,UAAC,CAAD,EAAI,OAAJ;AAAA,SAAiB;AAAE,IAAA,MAAM,EAAE,OAAV;AAAmB,IAAA,KAAK,EAAE;AAA1B,GAAjB;AAAA,CAX0B,CAAvB","sourcesContent":["import { RequestStatus, FormattedRequestError } from 'types/request';\nimport { createReducer } from 'states/utils/reducer';\nimport * as actions from 'states/songs/actions';\n\nexport type RequestState = {\n  status: RequestStatus;\n  error?: FormattedRequestError;\n};\n\nexport const requestReducer = createReducer<RequestState>({ status: 'unsent' })\n  .case(\n    actions.songsFetchLoading,\n    () => ({ status: 'loading' })\n  )\n  .case(\n    actions.songsFetchSuccess,\n    () => ({ status: 'success' })\n  )\n  .case(\n    actions.songsFetchFailure,\n    (_, payload) => ({ status: 'error', error: payload })\n  );\n"]}