{"version":3,"sources":["/Users/keisukekido/projects/itunesFetcher/src/utils/request/error/format.ts"],"names":[],"mappings":";;;;;AACA;;AAEO,IAAM,uBAAuB,GAAG,SAA1B,uBAA0B;AAAA,MAAG,QAAH,QAAG,QAAH;AAAA,SAA6D;AAClG,IAAA,MAAM,EAAE,QAAQ,CAAC,MADiF;AAElG,IAAA,OAAO,mBAAiB,QAAQ,CAAC;AAFiE,GAA7D;AAAA,CAAhC;;;;AAKA,IAAM,WAAW,GAAG,SAAd,WAAc,CAAC,IAAD;AAAA,SAAyC;AAClE,IAAA,IAAI,EAAJ,IADkE;AAElE,IAAA,OAAO,EAAE;AAFyD,GAAzC;AAAA,CAApB;;;;AAKA,IAAM,kBAAkB,GAAG,SAArB,kBAAqB,CAAC,KAAD;AAAA,SAChC,gCAAoB,KAApB,IACI,uBAAuB,CAAC,KAAD,CAD3B,GAEI,WAAW,CAAC,KAAD,CAHiB;AAAA,CAA3B","sourcesContent":["import { RequestError, ErrorWithResponse, FormattedRequestError } from 'types/request';\nimport { isErrorWithResponse } from './match';\n\nexport const formatErrorWithResponse = ({ response }: ErrorWithResponse): FormattedRequestError => ({\n  status: response.status,\n  message: `Error code: ${response.status}`,\n});\n\nexport const formatError = (data: Error): FormattedRequestError => ({\n  data,\n  message: 'Network error',\n});\n\nexport const formatRequestError = (error: RequestError): FormattedRequestError => (\n  isErrorWithResponse(error)\n    ? formatErrorWithResponse(error)\n    : formatError(error)\n);\n"]}