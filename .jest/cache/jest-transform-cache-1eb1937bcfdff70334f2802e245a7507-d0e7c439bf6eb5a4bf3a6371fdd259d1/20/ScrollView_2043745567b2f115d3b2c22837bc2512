887c06c991bd8a74f8b82c2a9331180c










'use strict';var _jsxFileName = "/Users/keisukekido/projects/itunesFetcher/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(source, true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(source).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}
































var AndroidScrollView;
var AndroidHorizontalScrollContentView;
var AndroidHorizontalScrollView;
var RCTScrollView;
var RCTScrollContentView;

if (require("../../Utilities/Platform").OS === 'android') {
  AndroidScrollView = require("../../ReactNative/requireNativeComponent")('RCTScrollView');
  AndroidHorizontalScrollView = require("../../ReactNative/requireNativeComponent")(
  'AndroidHorizontalScrollView');

  AndroidHorizontalScrollContentView = require("../../ReactNative/requireNativeComponent")(
  'AndroidHorizontalScrollContentView');

} else if (require("../../Utilities/Platform").OS === 'ios') {
  RCTScrollView = require("../../ReactNative/requireNativeComponent")('RCTScrollView');
  RCTScrollContentView = require("../../ReactNative/requireNativeComponent")('RCTScrollContentView');
} else {
  RCTScrollView = require("../../ReactNative/requireNativeComponent")('RCTScrollView');
  RCTScrollContentView = require("../../ReactNative/requireNativeComponent")('RCTScrollContentView');
}




























































































































































































































































































































































































































































































































function createScrollResponder(
node)
{
  var scrollResponder = _objectSpread({}, require("../ScrollResponder").Mixin);

  for (var _key in scrollResponder) {
    if (typeof scrollResponder[_key] === 'function') {
      scrollResponder[_key] = scrollResponder[_key].bind(node);
    }
  }

  return scrollResponder;
}


var Context = require('react').createContext(null);
var standardHorizontalContext = Object.freeze({
  horizontal: true });

var standardVerticalContext = Object.freeze({ horizontal: false });var




































ScrollView = function (_React$Component) {require("@babel/runtime/helpers/inherits")(ScrollView, _React$Component);















  function ScrollView(props) {var _this;require("@babel/runtime/helpers/classCallCheck")(this, ScrollView);
    _this = require("@babel/runtime/helpers/possibleConstructorReturn")(this, require("@babel/runtime/helpers/getPrototypeOf")(ScrollView).call(this, props));_this._scrollResponder = createScrollResponder(require("@babel/runtime/helpers/assertThisInitialized")(_this));_this.




































    _scrollAnimatedValue = new (require("../../Animated/src/AnimatedImplementation").Value)(
    0);_this.

    _scrollAnimatedValueAttachment = null;_this.
    _stickyHeaderRefs = new Map();_this.
    _headerLayoutYs = new Map();_this.

    state = _objectSpread({
      layoutHeight: null },
    require("../ScrollResponder").Mixin.scrollResponderMixinGetInitialState());_this.






































































































































































































    _handleScroll = function (e) {
      if (__DEV__) {
        if (
        _this.props.onScroll &&
        _this.props.scrollEventThrottle == null &&
        require("../../Utilities/Platform").OS === 'ios')
        {
          console.log(
          'You specified `onScroll` on a <ScrollView> but not ' +
          '`scrollEventThrottle`. You will only receive one event. ' +
          'Using `16` you get all the events but be aware that it may ' +
          "cause frame drops, use a bigger number if you don't need as " +
          'much precision.');

        }
      }
      if (require("../../Utilities/Platform").OS === 'android') {
        if (
        _this.props.keyboardDismissMode === 'on-drag' &&
        _this.state.isTouching)
        {
          require("../../Utilities/dismissKeyboard")();
        }
      }
      _this._scrollResponder.scrollResponderHandleScroll(e);
    };_this.

    _handleLayout = function (e) {
      if (_this.props.invertStickyHeaders === true) {
        _this.setState({ layoutHeight: e.nativeEvent.layout.height });
      }
      if (_this.props.onLayout) {
        _this.props.onLayout(e);
      }
    };_this.

    _handleContentOnLayout = function (e) {var _e$nativeEvent$layout =
      e.nativeEvent.layout,width = _e$nativeEvent$layout.width,height = _e$nativeEvent$layout.height;
      _this.props.onContentSizeChange &&
      _this.props.onContentSizeChange(width, height);
    };_this.

    _scrollViewRef = null;_this.
    _setScrollViewRef = function (ref) {
      _this._scrollViewRef = ref;
    };_this.

    _innerViewRef = null;_this.
    _setInnerViewRef = function (ref) {
      _this._innerViewRef = ref;
    };for (var _key2 in require("../ScrollResponder").Mixin) {if (typeof require("../ScrollResponder").Mixin[_key2] === 'function' && _key2.startsWith('scrollResponder')) {require("@babel/runtime/helpers/assertThisInitialized")(_this)[_key2] = require("../ScrollResponder").Mixin[_key2].bind(require("@babel/runtime/helpers/assertThisInitialized")(_this));}}Object.keys(require("../ScrollResponder").Mixin).filter(function (key) {return typeof require("../ScrollResponder").Mixin[key] !== 'function';}).forEach(function (key) {require("@babel/runtime/helpers/assertThisInitialized")(_this)[key] = require("../ScrollResponder").Mixin[key];});return _this;}require("@babel/runtime/helpers/createClass")(ScrollView, [{ key: "UNSAFE_componentWillMount", value: function UNSAFE_componentWillMount() {this._scrollResponder.UNSAFE_componentWillMount();this._scrollAnimatedValue = new (require("../../Animated/src/AnimatedImplementation").Value)(this.props.contentOffset ? this.props.contentOffset.y : 0);this._scrollAnimatedValue.setOffset(this.props.contentInset ? this.props.contentInset.top : 0);this._stickyHeaderRefs = new Map();this._headerLayoutYs = new Map();} }, { key: "UNSAFE_componentWillReceiveProps", value: function UNSAFE_componentWillReceiveProps(nextProps) {var currentContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;var nextContentInsetTop = nextProps.contentInset ? nextProps.contentInset.top : 0;if (currentContentInsetTop !== nextContentInsetTop) {this._scrollAnimatedValue.setOffset(nextContentInsetTop || 0);}} }, { key: "componentDidMount", value: function componentDidMount() {this._updateAnimatedNodeAttachment();} }, { key: "componentDidUpdate", value: function componentDidUpdate() {this._updateAnimatedNodeAttachment();} }, { key: "componentWillUnmount", value: function componentWillUnmount() {this._scrollResponder.componentWillUnmount();if (this._scrollAnimatedValueAttachment) {this._scrollAnimatedValueAttachment.detach();}} }, { key: "setNativeProps", value: function setNativeProps(props) {this._scrollViewRef && this._scrollViewRef.setNativeProps(props);} }, { key: "getScrollResponder", value: function getScrollResponder() {return this;} }, { key: "getScrollableNode", value: function getScrollableNode() {return require("../../Renderer/shims/ReactNative").findNodeHandle(this._scrollViewRef);} }, { key: "getInnerViewNode", value: function getInnerViewNode() {return require("../../Renderer/shims/ReactNative").findNodeHandle(this._innerViewRef);} }, { key: "getNativeScrollRef", value: function getNativeScrollRef() {return this._scrollViewRef;} }, { key: "scrollTo", value: function scrollTo(options, deprecatedX, deprecatedAnimated) {var x, y, animated;if (typeof options === 'number') {console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');y = options;x = deprecatedX;animated = deprecatedAnimated;} else if (options) {y = options.y;x = options.x;animated = options.animated;}this._scrollResponder.scrollResponderScrollTo({ x: x || 0, y: y || 0, animated: animated !== false });} }, { key: "scrollToEnd", value: function scrollToEnd(options) {var animated = (options && options.animated) !== false;this._scrollResponder.scrollResponderScrollToEnd({ animated: animated });} }, { key: "scrollWithoutAnimationTo", value: function scrollWithoutAnimationTo() {var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');this.scrollTo({ x: x, y: y, animated: false });} }, { key: "flashScrollIndicators", value: function flashScrollIndicators() {this._scrollResponder.scrollResponderFlashScrollIndicators();} }, { key: "_getKeyForIndex", value: function _getKeyForIndex(index, childArray) {var child = childArray[index];return child && child.key;} }, { key: "_updateAnimatedNodeAttachment", value: function _updateAnimatedNodeAttachment() {if (this._scrollAnimatedValueAttachment) {this._scrollAnimatedValueAttachment.detach();}if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {this._scrollAnimatedValueAttachment = require("../../Animated/src/AnimatedImplementation").attachNativeEvent(this._scrollViewRef, 'onScroll', [{ nativeEvent: { contentOffset: { y: this._scrollAnimatedValue } } }]);}} }, { key: "_setStickyHeaderRef", value: function _setStickyHeaderRef(key, ref) {if (ref) {this._stickyHeaderRefs.set(key, ref);} else {this._stickyHeaderRefs.delete(key);}} }, { key: "_onStickyHeaderLayout", value: function _onStickyHeaderLayout(index, event, key) {var stickyHeaderIndices = this.props.stickyHeaderIndices;if (!stickyHeaderIndices) {return;}var childArray = require('react').Children.toArray(this.props.children);if (key !== this._getKeyForIndex(index, childArray)) {return;}var layoutY = event.nativeEvent.layout.y;this._headerLayoutYs.set(key, layoutY);var indexOfIndex = stickyHeaderIndices.indexOf(index);var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];if (previousHeaderIndex != null) {var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);}} }, { key: "render", value: function render()

    {var _this2 = this;
      var ScrollViewClass;
      var ScrollContentContainerViewClass;
      if (require("../../Utilities/Platform").OS === 'android') {
        if (this.props.horizontal === true) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = require("../View/View");
        }
      } else {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
      }

      require('invariant')(
      ScrollViewClass !== undefined,
      'ScrollViewClass must not be undefined');


      require('invariant')(
      ScrollContentContainerViewClass !== undefined,
      'ScrollContentContainerViewClass must not be undefined');


      var contentContainerStyle = [
      this.props.horizontal === true && styles.contentContainerHorizontal,
      this.props.contentContainerStyle];

      if (__DEV__ && this.props.style !== undefined) {
        var style = require("../../StyleSheet/flattenStyle")(this.props.style);
        var childLayoutProps = ['alignItems', 'justifyContent'].filter(
        function (prop) {return style && style[prop] !== undefined;});

        require('invariant')(
        childLayoutProps.length === 0,
        'ScrollView child layout (' +
        JSON.stringify(childLayoutProps) +
        ') must be applied through the contentContainerStyle prop.');

      }

      var contentSizeChangeProps = {};
      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout };

      }var

      stickyHeaderIndices = this.props.stickyHeaderIndices;
      var children = this.props.children;

      if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
        var childArray = require('react').Children.toArray(this.props.children);

        children = childArray.map(function (child, index) {
          var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
          if (indexOfIndex > -1) {
            var _key3 = child.key;
            var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
            var StickyHeaderComponent =
            _this2.props.StickyHeaderComponent || require("./ScrollViewStickyHeader");
            return (
              require('react').createElement(StickyHeaderComponent, {
                key: _key3,

                ref: function ref(_ref) {return _this2._setStickyHeaderRef(_key3, _ref);},
                nextHeaderLayoutY: _this2._headerLayoutYs.get(
                _this2._getKeyForIndex(nextIndex, childArray)),

                onLayout: function onLayout(event) {return _this2._onStickyHeaderLayout(index, event, _key3);},
                scrollAnimatedValue: _this2._scrollAnimatedValue,
                inverted: _this2.props.invertStickyHeaders,
                scrollViewHeight: _this2.state.layoutHeight, __source: { fileName: _jsxFileName, lineNumber: 1007 } },
              child));


          } else {
            return child;
          }
        });
      }
      children =
      require('react').createElement(Context.Provider, {
        value:
        this.props.horizontal === true ?
        standardHorizontalContext :
        standardVerticalContext, __source: { fileName: _jsxFileName, lineNumber: 1027 } },

      children);



      var hasStickyHeaders =
      Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;

      var contentContainer =
      require('react').createElement(ScrollContentContainerViewClass, require("@babel/runtime/helpers/extends")({},
      contentSizeChangeProps, {

        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews:


        require("../../Utilities/Platform").OS === 'android' && hasStickyHeaders ?
        false :
        this.props.removeClippedSubviews,

        collapsable: false, __source: { fileName: _jsxFileName, lineNumber: 1041 } }),
      children);



      var alwaysBounceHorizontal =
      this.props.alwaysBounceHorizontal !== undefined ?
      this.props.alwaysBounceHorizontal :
      this.props.horizontal;

      var alwaysBounceVertical =
      this.props.alwaysBounceVertical !== undefined ?
      this.props.alwaysBounceVertical :
      !this.props.horizontal;

      var DEPRECATED_sendUpdatedChildFrames = !!this.props.
      DEPRECATED_sendUpdatedChildFrames;

      var baseStyle =
      this.props.horizontal === true ?
      styles.baseHorizontal :
      styles.baseVertical;
      var props = _objectSpread({},
      this.props, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],


        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this._scrollResponder.
        scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this._scrollResponder.
        scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this._scrollResponder.
        scrollResponderHandleResponderGrant,
        onResponderReject: this._scrollResponder.
        scrollResponderHandleResponderReject,
        onResponderRelease: this._scrollResponder.
        scrollResponderHandleResponderRelease,

        onResponderTerminate: this._scrollResponder.
        scrollResponderHandleTerminate,
        onResponderTerminationRequest: this._scrollResponder.
        scrollResponderHandleTerminationRequest,
        onScrollBeginDrag: this._scrollResponder.
        scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this._scrollResponder.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this._scrollResponder.
        scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this._scrollResponder.
        scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this._scrollResponder.
        scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this._scrollResponder.scrollResponderHandleTouchEnd,
        onTouchMove: this._scrollResponder.scrollResponderHandleTouchMove,
        onTouchStart: this._scrollResponder.scrollResponderHandleTouchStart,
        onTouchCancel: this._scrollResponder.scrollResponderHandleTouchCancel,
        onScroll: this._handleScroll,
        scrollBarThumbImage: require("../../Image/resolveAssetSource")(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ?
        1 :
        this.props.scrollEventThrottle,
        sendMomentumEvents:
        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ?
        true :
        false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,

        snapToStart: this.props.snapToStart !== false,

        snapToEnd: this.props.snapToEnd !== false,

        pagingEnabled: require("../../Utilities/Platform").select({

          ios:
          this.props.pagingEnabled === true &&
          this.props.snapToInterval == null &&
          this.props.snapToOffsets == null,

          android:
          this.props.pagingEnabled === true ||
          this.props.snapToInterval != null ||
          this.props.snapToOffsets != null }) });var



      decelerationRate = this.props.decelerationRate;
      if (decelerationRate != null) {
        props.decelerationRate = require("./processDecelerationRate")(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        if (require("../../Utilities/Platform").OS === 'ios') {


          return (

            require('react').createElement(ScrollViewClass, require("@babel/runtime/helpers/extends")({}, props, { ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 1154 } }),
            require("../../Utilities/Platform").isTV ? null : refreshControl,
            contentContainer));


        } else if (require("../../Utilities/Platform").OS === 'android') {var _splitLayoutProps =





          require("../../StyleSheet/splitLayoutProps")(require("../../StyleSheet/flattenStyle")(props.style)),outer = _splitLayoutProps.outer,inner = _splitLayoutProps.inner;
          return require('react').cloneElement(
          refreshControl,
          { style: [baseStyle, outer] },
          require('react').createElement(ScrollViewClass, require("@babel/runtime/helpers/extends")({},
          props, {
            style: [baseStyle, inner],

            ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 1169 } }),
          contentContainer));


        }
      }
      return (

        require('react').createElement(ScrollViewClass, require("@babel/runtime/helpers/extends")({}, props, { ref: this._setScrollViewRef, __source: { fileName: _jsxFileName, lineNumber: 1181 } }),
        contentContainer));


    } }]);return ScrollView;}(require('react').Component);ScrollView.Context = Context;


var styles = require("../../StyleSheet/StyleSheet").create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll' },

  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll' },

  contentContainerHorizontal: {
    flexDirection: 'row' } });



module.exports = ScrollView;