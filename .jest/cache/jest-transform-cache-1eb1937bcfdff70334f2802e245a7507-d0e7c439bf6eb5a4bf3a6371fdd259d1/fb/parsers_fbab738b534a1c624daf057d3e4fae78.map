{"version":3,"sources":["/Users/keisukekido/projects/itunesFetcher/src/utils/request/fetch/parsers.ts"],"names":[],"mappings":";;;;;;;AACA;;AAIO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAI,MAAJ;AAAA,SACxB,UAAC,QAAD;AAAA,WACE,YAAY,CAAC,aAAb,CAA2B,QAA3B,IACI,OAAO,CAAC,OAAR,CAAgB,IAAhB,CADJ,GAEI,MAAM,CAAC,QAAD,CAHZ;AAAA,GADwB;AAAA,CAAnB;;;;AAQA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,QAAD,EAAuB;AACrD,MAAI,YAAY,CAAC,eAAb,CAA6B,QAA7B,CAAJ,EAA4C;AAC1C,WAAO,QAAP;AACD;;AAED,MAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,QAAQ,CAAC,UAAnB,CAAd;AAEA,EAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACA,QAAM,KAAN;AACD,CATM;;;;AAWA,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,QAAD;AAAA,SACxB,YAAY,CAAC,aAAb,CAA2B,QAA3B,IACI,IADJ,GAEI,QAHoB;AAAA,CAAnB;;;;AAMA,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,QAAD;AAAA,SACvB,QAAQ,CAAC,IAAT,EADuB;AAAA,CAAlB;;;;AAIA,IAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,QAAD;AAAA,SACvB,SAAS,CAAC,QAAD,CAAT,CACG,IADH,CACQ,UAAA,IAAI;AAAA,WACR,IAAI,GACF,IAAI,CAAC,KAAL,CAAW,IAAX,CADE,GAEF,EAHM;AAAA,GADZ,CADuB;AAAA,CAAlB","sourcesContent":["import { ErrorWithResponse } from 'types/request';\nimport * as conditionals from './conditionals';\n\nexport type Parser<Result> = (respones: Response) => Promise<Result>;\n\nexport const safeParser = <V>(parser: Parser<V>) => (\n  (response: Response): Promise<V | null> => (\n    conditionals.isEmptyStatus(response)\n      ? Promise.resolve(null)\n      : parser(response)\n  )\n);\n\nexport const parseValidStatus = (response: Response) => {\n  if (conditionals.isSuccessStatus(response)) {\n    return response;\n  }\n\n  const error = new Error(response.statusText) as ErrorWithResponse;\n\n  error.response = response;\n  throw error;\n};\n\nexport const parseValue = (response: Response) => (\n  conditionals.isEmptyStatus(response)\n    ? null\n    : response\n);\n\nexport const parseText = (response: Response) => (\n  response.text()\n);\n\nexport const parseJSON = (response: Response) => (\n  parseText(response)\n    .then(text => (\n      text\n      ? JSON.parse(text)\n      : {}\n    ))\n);\n"]}