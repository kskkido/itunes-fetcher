{"version":3,"sources":["/Users/keisukekido/projects/itunesFetcher/src/utils/request/status/index.ts"],"names":[],"mappings":";;;;;;;AAAA;;AAGO,IAAM,sBAAsB,GAAiD,CAAC,CAAC,IAAF,CAAO,CACzF,CAAC,CAAC,CAAC,GAAF,CAAM,UAAA,MAAM;AAAA,SAAI,MAAM,KAAK,SAAf;AAAA,CAAZ,CAAD,EAAwC,CAAC,CAAC,MAAF,CAAS,SAAT,CAAxC,CADyF,EAEzF,CAAC,CAAC,CAAC,GAAF,CAAM,UAAA,MAAM;AAAA,SAAI,MAAM,KAAK,OAAf;AAAA,CAAZ,CAAD,EAAsC,CAAC,CAAC,MAAF,CAAS,OAAT,CAAtC,CAFyF,EAGzF,CAAC,CAAC,CAAC,GAAF,CAAM,UAAA,MAAM;AAAA,SAAI,MAAM,KAAK,QAAf;AAAA,CAAZ,CAAD,EAAuC,CAAC,CAAC,MAAF,CAAS,QAAT,CAAvC,CAHyF,EAIzF,CAAC,CAAC,CAAC,CAAH,EAAM,CAAC,CAAC,MAAF,CAAS,SAAT,CAAN,CAJyF,CAAP,CAA7E","sourcesContent":["import * as R from 'ramda';\nimport { RequestStatus } from 'types/request';\n\nexport const composeRequestStatuses: (statuses: RequestStatus[]) => RequestStatus = R.cond([\n  [R.any(status => status === 'loading'), R.always('loading')],\n  [R.any(status => status === 'error'), R.always('error')],\n  [R.any(status => status === 'unsent'), R.always('unsent')],\n  [R.T, R.always('success')],\n]);\n"]}